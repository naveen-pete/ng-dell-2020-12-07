
07-Dec-2020
-----------
1. What is Angular?
- Web programming
- UI programming
- Framework on UI
- jQuery - Async calls
- Angular is a java script framework
- Normally used for SPA apps
- Framework - component-based
- SPA
- Page will not refreshed for each and every request

- MPA - HTML generation - server - ASP.NET, JSP, Servlet, Python, PHP 
- SPA - HTML generation - client - Angular, React, Vue

- MVC - Angular
-  V  - React - Redux - FW

- AoT - Ahead of Time compilation (v4+)
- JIT - Just in Time (v2)

- Universal - SSR

- Material - UI Framework - Material Design - Android

- Tree Shaking - Dead code elimination

- ES - spec
  JS - implementation of ES spec
  
- JS code

  - dynamic types
  - static types
  
  
  var name: string 
  var age - number
  
  var n1: number = 10;
  var n2: number = 20;
  
  ....
  
  
  n1 = 'a'; - compile
  
  
  ....
  
  var result = n2 / n1;   (production)
  
  
- Java, C#, C++ => TS => JS

- Class, Interface, Module, Generics
  
08-Dec-2020
-----------
- Testing testing frameworks (unit testing)
  1. Jasmine
  2. Chai
  3. Mocha
  4. Jest
  
- Angular
  1. Jasmine - unit testing
  2. Protractor - end-to-end testing
  3. Karma - test runner
  
- Launching an Angular apps
  1. Convert TS into JS code - html, css, js
  2. Create bundles (JS, CSS, Images)
  3. Update index.html with references to bundled code
  4. Launch web server - Angular Live Development Server
  5. App is hosted on web server - app is available for use
  
- JavaScript Modules

  - Amazon
    - Product Management
    - Customer Management
    - Order Management
    - Shipping
    - ShoppingCart
    - Payments
    
    - index.html
      - app.js        - JS Module
      - products.js   - JS Module - class, function, variable
      - customers.js  - JS Module - class, function, variable
      - orders.js     - JS Module
      
- Component - Search Component
  1. UI - HTML - .html
  2. Style - CSS - .css
  3. Data - class - property (categories[]) - TS - .ts
  4. Behavior - class - method (search(searchText)) - TS - .ts
  
09-Dec-2020
-----------
- How to include Bootstrap (UI (CSS) Framework by Twitter) in my app?
  1. Use <link> to CDN deployment of Bootstrap
  2. Install Bootstrap locally within the app
  
- Data binding
  Model - TS property - productName
  View - html - 
  
- Directives - built-in
  1. Attribute directives
    - ngModel, ngStyle, ngClass
    
  2. Structural directives
    - *ngFor, *ngIf, *ngSwitch
  
11-Dec-2020
-----------
- Component Interaction

  - Child to parent interaction
  
  class A {
    arr[];
    
    b: B
    
    A() {
      this.b = new B()
      b.event.subscribe()
    }
  }
  
  class B {
    event
    
    B() {
    }
    
    op() {
      this.event.raise();
    }
    // 
  }
  
  1. cyclic reference
  2. tight coupling
  
  Observer / pub - sub
  
- Services

  - ProductDetailComponent
    - name, image, price, seller, rating
    - code to issue http request to this REST API url
      - https://amazon.in/api/products/1
    
  - ShoppingCartComponent
    - name, image, price
    - code to issue http request to this REST API url
      - https://amazon.in/api/products/1
    
  - OrdersComponent
    - name, image, price
    - code to issue http request to this REST API url
      - https://amazon.in/api/products/1
    
  MVC
  
  Issues
    - code duplication
    - violates SRP (design principle)
    
  - Service
  
  class A {
    b: B
    
    constructor() {
      // this.b = new B();
    }
    
    m1() {
      this.b.log(value);
    }
  }
  
  class B {
    log(message) {
      // code to log into the server
    }
  }
  
  class MockB {
    log(message) {
      // code to log into the server
    }
  }

  
  Unit tests for class A
  
  a: A = new A();
  a.m1();
  
  
  Tight coupling
  
  - Dependency Injection

14-Dec-2020
-----------
- ProductsComponent (Parent)
    - products[]
    - this.service.getAllProducts()
    - this.service.refreshProducts.subscribe()
        
                                        - ProductsService
                                            - refreshProducts (Event)
                                            - products[]
                                            - getAllProducts()
                                            - addProduct()
                                              - this.refreshProducts.emit(this.products)
        
- ProductFormComponent (Child)
    - this.service.addProduct(newProduct)
    
- Component (C) - Component (P) - EventEmitter
- Service - Component - Subject

- Form Validations
  1. Template-Driven forms - FormsModule
    - built-in form validations
    - add code in html template
    - not unit-testable
    - less code 
    - less control
    
  2. Reactive forms (Model-Driven forms) - ReactiveFormsModule
    - built-in form validations
    - custom validations
    - add code in typescript
    - unit-testable
    - more code
    - more control
    
- Form (control) properties
  - valid / invalid - boolean  (ng-valid / ng-invalid)
  - pristine / dirty - boolean  (ng-pristine / ng-dirty)
  - touched / untouched - boolean  (ng-touched / ng-untouched)
  
  - errors - object (null / non-null)
  - controls - object
  - value - object
  
15-Dec-2020
-----------
- Routing - Navigation within my app
  - RouterModule - @angular/router
  
  1. define application routes
  2. configure app routes with the RouterModule
  3. add configured RouterModule to imports array of AppModule
  
16-Dec-2020
-----------
- Async programming in JS
  1. Callback
  2. Promise
  3. Observable
      - not is a standard, it is not a part of JS language
      - third-party library - rxjs